----------------------------------------------------------------------------------------------------------------------
There are two types of number specification in Verilog: sized and unsized.

Sized numbers
Sized numbers are represented as <size> '<base format> <number>

4'b1111 // This is a 4-bit binary number
12'habc // This is a 12-bit hexadecimal number
16'd255 // This is a 16-bit decimal number.

Unsized numbers
Numbers that are specified without a <base format> specification are decimal numbers by default. Numbers that are written without a <size> specification have a default number
of bits that is simulator- and machine-specific (must be at least 32).

23456 // This is a 32-bit decimal number by default
'hc3 // This is a 32-bit hexadecimal number
'o21 // This is a 32-bit octal number

Underscore characters and question marks
An underscore character "_" is allowed anywhere in a number except the first character. Underscore characters are allowed only to improve readability of numbers and are
ignored by Verilog.

A question mark "?" is the Verilog HDL alternative for z in the context of numbers.

12'b1111_0000_1010 // Use of underline characters for readability 4'b10?? // Equivalent of a 4'b10zz

A string is a sequence of characters that are enclosed by double quotes. The restriction on a string is that it must be contained on a single line, that is, without a carriage return. 

Escaped Identifiers
Escaped identifiers begin with the backslash ( \ ) character and end with whitespace (space, tab, or newline). All characters between backslash and whitespace are processed
literally. Any printable ASCII character can be included in escaped identifiers. Neither the backslash nor the terminating whitespace is considered to be a part of the identifier.
\a+b-c
\**my_name**


Vectors can be declared at [high# : low#] or [low# : high#], but the left number in the squared brackets is always the most significant bit of the vector. In the example shown
below, bit 0 is the most significant bit of vector virtual_addr.

reg [0:40] virtual_addr; // Vector register, virtual address 41 bits wide

An integer is a general purpose register data type used for manipulating quantities.
Integers are declared by the keyword integer. Although it is possible to use reg as a
general-purpose variable, it is more convenient to declare an integer variable for purposes
such as counting.


Verilog HDL local parameters (defined using keyword localparam -) are identical to parameters except that they cannot be directly modified with the defparam statement
or by the ordered or named parameter value assignment. The localparam keyword is used to define parameters when their values should not be changed. For example, the 
state encoding for a state machine can be defined using localparam. The state encoding cannot be changed. This provides protection against inadvertent parameter 
redefinition.

------------------------------------------------------------------------------------------------------------------------

Source: https://www.youtube.com/watch?v=hgzuxRc7n6M&list=PLZU5hLL_713x0_AV_rVbay0pWmED7992G&index=7&ab_channel=AdiTeman

|| Rules ||

-- Inside the combinational always block, always use blocking assignment (=)
-- Inside the sequential always block, always use non-blocking assignment (<=)
-- Do not mix blocking and non-blocking assignments in the same always block
-- Do not assign to the same variable from more than one always block
-- In a combinational always block, there are statements with blocking assignment, which has variables in the left hand side and right hand side. Always add all the variables
   in the RHS in the sensitivity list.
-- Make sure that every if has an else block, specially in the combinational always block. Otherwise during synthesis.
-- "assign" statement is used outside of always block, while to assign a variable inside the always block the blocking (=) and non-blockin (<=) assignment is used for
    combinational and sequential always block respectively. In that case the variable in LhS should be declared as "reg"
    
    
    
|| Note ||
-- By default verilog treats all vectors as unsigned
-- To make a constant signed add s after apostrophe, 10'sh37C
